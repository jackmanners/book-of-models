<!-- TODO: MOVE TO APPENDIX OR Part 3 -->

# Using R and Python in ML

## Python

Python is the king of ML. Many other languages can perform ML and maybe even well, but Python is the most popular, has the most packages, and it's where tools are typically implemented and developed first. Even if it isn't your primary language, it should be for any implementation of machine learning.  

Pros:

- powerful and widely used tools
- typically very efficient on memory and fast
- many modeling packages try to use the sklearn API for consistency
- easy pipeline/reproducibility setup

Cons:

- Everything beyond getting a prediction can be difficult: e.g. good model summaries and visualizations, interpretability tools, extracting key estimated model features, etc. For example, getting features names as part of the output is a recent development for scikit-learn and other modeling packages.
- Data processing can be notably tedious. Pandas (or polars), to put it simply, is not tidyverse.
- The ML ecosystem is fragile, and one package's update will often break another package's functionality, meaning your work will often be frozen in time to whenever you first began model exploration. Many industry modeling environments are still based on versions of Python that may be many years old, and the model packages will contain all the bugs from the time of release when the Python environment was created.
- Package documentation is often quite poor, even for some important model aspects of the model, and there is no consistency from one package to another. Demonstrations, if even available, often may not work, and you may have to dig into the source code to figure out what's actually going on. This hopefully will be alleviated in the future with modern AI tools that can write the documentation for you.
- Interactive model development with Jupyter has not been close to the level with alternatives like RMarkdown for years. However, Quarto has already shown great promise, as this book was written with it, so in the end, the R community may bail out the Python community on this issue,


## R

Your authors can say definitively that R is actually great at ML and at production level, as they have used it with data comprising millions of data points for very large and well-known companies. The default tools are not as fast or memory efficient relative to Python, but they are typically more user friendly, and usually have good to even excellent documentation, as package development has been largely standardized for some time. As far as some drawbacks, some Python packages such as xgboost, lightgbm, and keras have concurrent development in R, but the R development typically lags with feature implementation. And when it comes to ML with deep learning models, R packages merely wrap the Python packages. In general though, for everything before and after ML, from feature engineering to visualization to reporting, R has much more, or at the very least easier, tools to offer. 

Pros:

- very user friendly and fast data processing
- easy to use objects that contain the things you'd need to use for further processing
- practically every tool you'd use works with data frames
- saving models does not require any special effort
- easy post-processing of models with many packages
- documentation is standardized for any CRAN and most non-CRAN packages, and will only improve with AI tools. Unlike Python, examples are expected for documented functions, and the package will fail to build if *any* example fails, and even warn if examples are empty.  This is a great way to ensure that examples are present and actually work.
- ML tools can be used on tabular data of millions of instances *in memory* and in production, and on data that is too large to fit in memory using many viable tools.

Cons:

- relatively slow
- memory intensive
- pipeline/reproducibility has only recently been of focus
  - `tidymodels` is a great but fairly non-standard way of conducting machine learning
  - `mlr3` is much more `sklearn`-like- fast and memory efficient, but not as widely used


In summary, Python is the best tool for ML, but you can use R for pretty much everything else if you want, including ML if it's not too computationally expensive or you don't have to worry about that aspect. Quarto makes it easy to use both, including simultaneously, so the great thing is that you don't have to choose!